03-29

OOP 특징(원리)
1.Encapsulation 캡슐화
	데이터/ 알고리즘 / 공개여부infomation hiding 정보은닉. 

2. Inheritance 상속

3. Polymorphism 다형성


What is the inheritance of OOP?
Inheritance in OOP = When a class derives from another class. 
The child class will inherit all the public and protected properties 
and methods from the parent class. In addition, 
it can have its own properties and methods. 
An inherited class is defined by using the extends keyword.


상속은 코드 중복을 줄여줌.
소프트웨어 세상에서는 자식이 부모를 선택함. 
"자식이 부모를 상속받았다" 라고 이야기 함. 


static 은 이텔릭체로 보여줌  ( interface variable)
class가 final이라면 부모 클래스가 될 수 없다.
생성자가 private으로 되어있고 new 생성자도 쓸 수 없다.  

상속을 만드는 키워드는 " extends "

인스턴스 요소를 확인해야한다. 
인스턴스 요소가 있어야 상속이 가능. 

final이 클래스에 붙으면 상속불가 클래스. 

오버라이딩 - 상속관계에서만 해당. 
Overriding 재정의.  : 부모의 메소드를 자식이 재정의 가능. 

오버로딩과 오버라이딩을 구분해야함 . // 각 조건 확인

오버로딩 : 같은 공간에서 클래스의 객체 속성을 중복정의 하는 것. 
오버라이딩 : 상속 받은 부모의 객체의 속성을 재정의 하는 것. 

oop의 다형성을 동작하려면 모든 oop의 기능을 사용할 수 있어야 한다. 

상속.
오버라이딩 조건 
1. 타입, 2. 메소드이름. 3.매개변수  = 부모 자식모두 동일해야한다. 
접근제한을 더 강화 할 수 없다. (가시성을 좁힐 수 없다 ex) public -> private 불가/ 
반대로 접근제한을 더 허용 할수는 있다. ex) private -> public 가능) 
(: Access Modifier setting range will be in judge)

나 자신 객체인 클래스를 사용할 때 this
부모 객체의 클래스를 상속 받아서 사용할 때 super  

[메소드]
부모의 메소드가 미흡하다면 자식 메소드는 오버라이딩을 통해서 재정의가 가능하다. 
단,, 메소드 오버라이딩의 조건을 지켜야 재정의 가능. 

오버라이딩이 된다고 해서 부모의 메소드가 사라지는 것은 아니다. 
본래의 부모 메소드를 호출하기 위해서 자식 메소드에서 super. 을 사용해서 
부모의 원래 메소드를 호출 할 수 있다. 

final이 부모 클래스에 붙으면 오버라이딩이 불가하다. 
final이 붙는 곳은 1. 로컬 2. 필드 3. 메소드

접근제한자 Access Modifier : 
------> visibility (가시성) 설정 .
// public // default // protected // private // 

protected 제한 대상 : 필드, 생성자, 메소드. 
protected 제한 범위 : 같은 패키지이거나(패키지 권한), 자식 객체만 사용 가능. 
* + 패키지가 다르더라도 상속관계에 있는 자식 패키지는 직접 접근 권한을 가질 수 있음. 


추상클래스 abstract
new 연산자로 인스턴스화 되어 선언 될 수 없음 . 불안전한 클래스이다. 
추상 메소드를 가질 수 있다. 추상 클래스는 --- 클래스에 abstract 키워드가 붙음

추상클래스는 상속용도라고 생각..  

불안전한 이유.. 
추상클래스는 body가 없는 추상 클래스를 가질수 있다 
역시나 클래스에 abstract 키워드를 사용했을 때 추상클래스 생성.  
이러한 추상 클래스를 상속받은 자식 클래스는 
부모가 가진 추상메소드의 body의 코드를 작성해야 한다. [Override]  



Java Annotation 어노테이션 
: 인터페이스를 기반으로 한 문법 



var - 타입유추기법
값이 있으면 타입 추론이 가능함
	var num = 100;
	var d = 10.5;
	var rrr = new Random();
* 로컬변수에서만 var 사용가능. 



===============================================================
상속 

상속 개념 

상속
	- 부모 클래스의 필드와 메소드를 자식 클래스에게 물려줄 수 있음
상속의 이점 
	- 이미 개발된 클래스를 재사용하므로 중복 코드를 줄임
	- 클래스 수정을 최소화
클래스 상속 
	- 자식 클래스를 선언할 때 어떤 부모로부터 상속받을 것인지를 결정하고, 
	부모 클래스를 다음과 같이 extends 뒤에 기술
		public class 자식클래스  extends  부모클래스 {
		}
	- 다중 상속을 허용하지 않음. extends 뒤에 하나의 부모 클래스만 상속
		public class 자식클래스 extends 부모클래스1, 부모클래스2 (X 올수없다.) { }

메소드 재정의
메소드 오버라이딩
	- 상속된 메소드를 자식 클래스에서 재정의하는 것. 
	해당 부모 메소드는 숨겨지고, 자식 메소드가 우선적으로 사용
	- 부모 메소드의 선언부 (리턴 타입, 메소드 이름, 매개변수) 와 동일해야 함 
	- 접근 제한을 더 강하게 오버라이딩할 수 없음 (public -> private으로 변경 불가)
	- 새로운 예외를 throws할 수 없음

부모 메소드 호출 
	- 자식 메소드 내에서 super 키워드와 도트(.) 연산자를 사용하면 숨겨진 부모 메소드를 호출
	- 부모 메소드를 재사용함으로써 자식 메소드의 중복 작업 내용을 없애는 효과

final 클래스와 final 메소드 

final 클래스 
	- final 클래스는 부모 클래스가 될 수 없어 자식 클래스를 만들 수 없음 
		public final class 클래스 {    }
final 메소드 
	- 메소드에서 선언할 때 final 키워드를 붙이면 오버라이딩할 수 없음.
	- 부모 클래스를 상송해서 자식 클래스를 선언할 때, 
	부모 클래스에 선언된 final 메소드는 자식 클래스에서 재정의할 수 없음

protected 접근 제한자 

protected 접근 제한자 
	- protected는 상속과 관련이 있고, public과 default의 중간쯤에 해당하는 접근 제한
	- protected는 같은 패키지에서는 default 처럼 접근이 가능하나, 
	다른 패키지에서는 자식 클래스만 접근을 허용

타입 변환

자동 타입 변환 
	- 자동적으로 타입 변환이 일어나는 것 
		부모타입 변수 = 자식타입객체;
			(자동 타입 변환)
	- 자식은 부모의 특징과 기능을 상속받기 때문에 부모와 동일하게 취급

강제 타입 변환
	- 부모 타입은 자식 타입으로 자동 변환되지 않음 . 대신 캐스팅 연산자로 강제 타입 변환 가능.
	- 자식 객체가 부모 타입으로 자동 변환하면 부모 타입에 선언된 필드와 메소드만 사용 가능.

다형성

다형성 
	- 사용 방법은 동일하지만 실행 결과가 다양하게 나오는 성질 
	- 다형성을 구현하기 위해서는 자동 타입 변환과 메소드 재정의가 필요

필드 다형성
	- 필드 타입은 동일하지만, 대입되는 객체가 달라져서 
	실행 결과가 다양하게 나올 수 있는 것.

매개변수 다형성 
	- 메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 
	호출할 때 동일한 타입의 자식 객체를 제공할 수 있음.
	- 어떤 자식 객체가 제공되는냐에 따라서 메소드의 실행 결과가 달라짐

객체 타입 확인

instanceof 연산자   
	- 매개변수가 아니더라도 변수가 참조하는 객체의 타입을 확인할 때 instanceof 연산자를 사용
	- instanceof 연산자에서 좌항의 객체가 우항의 타입이면 true를 산출하고 
	그렇지 않으면 false를 산출 

	boolean result = 객체 instanceof 타입;
	- Java12부터는 instanceof 연산의 결과가 true일 경우 
	우측 타입 변수를 사용할 수 있기 때문에 강제 타입 변환이 필요 없음. 

추상 클래스 

추상 클래스 
	- 객체를 생성할 수 있는 실체 클래스들의 공통적인 필드나 메소드를 추출해서 선언한 클래스
	- 추상 클래스는 실체 클래스의 부모 역할. 공통적인 필드나 메소드를 물려받을수 있음.

추상 클래스 선언 
	- 클래스 선언에 abstract 키워드를 붙임 
	- new 연산자를 이용해서 객체를 직접 만들지 못하고 
	상속을 통해 자식 클래스만 만들 수 있다. 
		
		public abstract class 클래스명 {
		// 필드
		// 생성자
		// 메소드
		}


추상 메소드와 재정의 
	- 자식 클래스들이 가지고 있는 공통 메소드를 뽑아내어 추상 클래스로 작성할 때,
	메소드 선언부만 동일하고 실행 내용은 자식 클래스마다 달라야 하는 경우 추상 메소드를 선언할 수 있음.
	- 일반 메소드 선언과의 차이점은 abstract 키워드가 붙고 , 메소드 실행 내용인 중괄호{} 가 없다. 
		abstract 리턴타입 메소드명 (매개변수, ... );

봉인된 클래스
 
sealed 클래스 
	- Java 15부터 무분별한 자식 클래스 생성을 방지하기 위해 봉인된 클래스가 도입 
	- sealed 키워드를 사용하면  permits 키워드 위에 상속 가능한 자식 클래스를 지정 
	- final은 더 이상 상속할 수 없다는 뜻이고, non-sealed는 봉인을 해제한다는 뜻

		public sealed class Person  permits Employee, Manager { ... }
	
		public final class Employee extends Person {...}
		public non-sealed class Manager extends Person {...}	
			
	





