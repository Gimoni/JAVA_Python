0427 - javascript 

javascript에서 상속 받을 때 반드시 super() 를 주어야함

javascript 배열 
 .delete / .splice  : 원본 배열을 변경 시킴. 
 .slice : 배열의 일정 부분을 불러옴 배열변경을 하지 않음 

splice 사용  

> let x = [1,2,3,4,5,6,7,8,9]
undefined
> x
[
  1, 2, 3, 4, 5,
  6, 7, 8, 9
]
> x.splice(5)
[ 6, 7, 8, 9 ]
> x = [1,2,3,4,5,6,7,8,9]
[
  1, 2, 3, 4, 5,
  6, 7, 8, 9
]
> x.splice(2, 3)
[ 3, 4, 5 ]
> x
[ 1, 2, 6, 7, 8, 9 ]
> x = [1,2,3,4,5,6,7,8,9]
[
  1, 2, 3, 4, 5,
  6, 7, 8, 9
]
> x.splice(1, 0, 100)
[]
> x
[
  1, 100, 2, 3, 4,
  5,   6, 7, 8, 9
]

splice 와 slice 차이 
==================
> x
[
  1, 100, 2, 3, 4,
  5,   6, 7, 8, 9
]
[
  1, 100, 2, 3, 4, 5, 6, 7, 8, 9 ]
  5,   6, 7, 8, 9
]
> x.slice(5)
[ 5, 6, 7, 8, 9 ]
> xㄴ
[
  1, 100, 2, 3, 4,
  5,   6, 7, 8, 9
]
> x.slice(0, 3)
[ 1, 100, 2 ]
> x
[
  1, 100, 2, 3, 4,
  5,   6, 7, 8, 9
]
>


javascript function  함수 설계 

null 과 undefined는 유사하지만 다른 개념 
변수를 만들었고 값을 초기화 하지 않은 변수는 undefined. 

boolean(undefined)/ boolean(null)/ boolean(NaN) == false 

undefined 도 값이다.. 

callback 함수 다른 곳에서 함수를 호출 . 

함수도 객체 ..
function 도  type , 즉 객체이고 
method인 function은 객체이기도 하기 때문에 
변수 또는 연산자 항목 등 
사용 범위가 방범위 하다. 

익명객체= 이름이 없는 클래스 

객체 리터럴 

객체 속성에 접근  = 대괄호 [] , dot (.) 

javascript는 sleep 이 없기 때문에 setInterval / clearInterval.. 


===================================
 
자바스크립트 기본 문법 

함수
- 선언과 호출, 실행 우선순위
- 선언과 호출
- 함수 - 코드 집합을 나타내는 자료형
- 익명 함수 생성 - 함수 이름을 입력하지 않고 만들기
- 선언적 함수 생성 - 함수 이름을 입력해서 만들기

선언과 호출, 실행 우선순위 
- 실행 우선순위
	: 가장 마지막에 입력된 값이 저장 
** 주의** 선언적 함수와 익명 함수를 함께 사용할 때 
모든 코드를 읽기 전에 선언적 함수를 먼저 읽음 

매개변수와 반환 값
매개변수 
- 함수의 괄호 안에 집어넣어 함수 쪽에 추가적인 정보를 전달하는 것

리턴 값 
- 함수를 실행한 결과를 반환한 값. 

function 함수 이름 (매개변수, 매개변수, 매개변수) {
	// 함수코드
	// 함수코드
	return 반환 값;
}


콜백 함수 
- 매개변수로 전달되는 함수 
	
	// 함수 선언 
	function callTenTimes(callback) {
	     // 10회 반복
	     for(var i=0; i<10; i++)

객체 
객체 개요 
- 객체는 자료형 여러 개를 한 번에 저장 
- 배열은 요소에 접근할 때 인덱스를 사용하지만, 객체는 키를 사용. 
- 객체 뒤의 대괄호를 사용해 키를 입력하면 객체 속성에 접근 (key typt = String)
- 객체 위의 점(.) 을 찍어 객체 속성에 접근
- for in 반복문
	: 객체 요소 하나씩 살펴볼 수 있음 .
:for in 반복문 형태

for (var 키 in 객체) {
	문장
}
- for of 반복문
	: 배열에 속해 있는  객체요소를 반복문을 통해 출력 가능.
:for of 반복문 형태

for (var 키 of 객체) {
	문장
}

속성과 메서드 
- 요소 (element) 
: 배열에 있는 값 하나하나

- 속성 (property)
: 객체에 있는 값 하나하나

- this 키워드 
: 객체에 있는 속성을 메서드에서 사용하고 싶을 때sms 
자신이 가진 속성임을 분명하게 표시해야 함.

