0418
java 제네릭 

java의 절차적 프로그램과 oop에서 부족한 부분을 보안하기 위해 제네릭을 사용. 
자바에서 제네릭이란 데이터의 타입 data type을 일반화(generalize)한다는 것을 의미 
제네릭은 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법. 

컬렉션라이브러리는 제너릭으로 지정되고, 
어떤 타입을 정렬하던 비교 하는 비교비의 결과는 일정하다. / asc , desc
알고리즘은 변화하지 않고 그안의  데이터 타입만 변경. // 이때 제너릭을 사용.
제너릭이 아니면 데이터 타입만 변경이 불가. 

제너릭 타입 - 제너릭 클래스 / 제너릭 인터페이스 

비교대상이 되는 데이터 타입을 변경해준다 //
but 계속 생성되어 중복되는 인터페이스의 중복을 해결하기 위해 
제네릭을 사용해서 중복을 최소화 한다. 
절차적 프로그래밍의 효율성 -> OOP
객체지향 프로그래밍의 효율성 -> Generic


// object 는 모든 타입을 줄수 있음 why? 모든 타입의 조상부모는 object이기 때문
// 자바에서 모든 객체는 object로 명시 가능. 
모든 클래스의 최초 조상은 Object //
Object 
- toString - 객체를 문자열로 바꿔줌. 
어떤객체든 스트링으로 변환이 가능함. // 

모든 객체가 문자열로 변환 되려면 toString으로 
override 되어야 한다. (from Object // 조상부모.)






======================================
제네릭이란  ? 
- 결정되지 않은 타입을 파라미터로 처리하고 실제 사용할 때 
파라미터를 구체적인 타입으로 대체시키는 기능 
- <T>는 T가 타입 파라미터임을 뜻하는 기호. 
타입이 필요한 자리에 T를 사용할 수 있음을 알려줌
 
public class Box<T> {
      public T content;
}

제네릭 타입 
- 결정되지 않은 타입을 파라키터로 가지는 클래스와 인터페이스 
- 선언부에 '<>'부호가 붙고 그 사이에 타입 파라미터들이 위치 
스터 텍스트 스타일을 편집하려면 클릭
- 외부에서 제네릭 타입을사용하려면 타입 파라미터에구체적인 타입을 지정. 
지정하지않으면 Object 타입이 암묵적으로사용

제네릭 메소드
- 타입 파라미터를 가지고 있는 메소드. 타입 파라미터가 메소드 선언부에 정의
- 리턴 타입 앞에 <> 기호 추가하고 타입 파라미터 정의 후 
리턴 타입과 매개변수 타입에서 사용. 
- 타입 파라미터 T는 매개값의타입에 따라 컴파일 과정에서 구체적인 타입으로대체

public <A, B,...> 리턴타입 메소드명(매개변수, .... )  {....}
	타입 파라미터 정의 

public <T> Box<T> boxing (T t) {  }
Box<Integer> box1 = boxing(100);
Box<String> box2 = boxing("안녕");


제한된타입파라미터
- 모든 타입으로 대체할 수 없고, 특정 타입과 자식 또는 구현 관계에있는 타입만 
대체할 수 있는 타입 파라미터
- 상위 타입은 클래스뿐만아니라 인터페이스도가능

public <T extends 상위타입 > 리턴타입 메소드(매개변수, ...) {...}

public <T extends Number> boolean compare(T t1, T t2) {
	double v1 = t1.doubleValue();
	double v1 = t1.doubleValue();
	return (v1 == v2); 
}

와일드카드타입 파라미터
- 제네릭 타입을 매개값이나리턴 타입으로 사용할 때 범위에 있는 모든 타입으로 대체할 수 있는 타
입 파라미터. ?로 표시





