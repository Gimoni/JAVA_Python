03-22
Android 

안드로이드의 개요 

1. 스마트폰의 개요 
	- 스마트폰 
	: 통화기능 + 컴퓨터  + 다양한 기능 내장( mp3, 카메라, DMB, GPS 등).

	스마트폰의 역사 
	- 1992년 IBM사의 사이먼(최초)
	- 1996년 노키아 9000
	- 2002년 마이크로소프트 포켓 pc
	- 2007년 아이폰 
	- 2008년 안드로이트 폰
	- 2010년 윈도폰7

	스마트폰의 운영체제 
	- 2021년 2분기 기준 세계시장 점유율
	 안드로이드 : 72% , 아이폰 : 23%, 윈도폰 : 0.02%



	스마트폰 개발 환경 비교 


2. 안드로이드 

	안드로이트 버전의 변천사 



	안드로이드의 주요 기능 
	- 애플리케이션 프레임워크를 통해서 제공되는 API를 사용함으로써 
	  코드를 재사용하여 효율적이고 빠른 애플리케이션 개발 가능함
	- 모바일 기기에 최적화된 달빅 또는 아트런타임(ART) 제공함
	- 2D 그래픽 및 삼차원 그래픽을 최적화하여 표현함
	- 모바일용 데이터베이스인 SQLite를 제공함
	- 각종 오디오, 비디오 및 이미지 형식을 지원함 
	- 모바일 기기에 내장된 각종 하드웨어(블루투스, 카메라, 나침반, WiFi 등) 지원함
	- 이클립스 IDE 또는 Android Studio를 통해서 강력하고 빠른 개발 환경 제공함
	

	안드로이드의 특징
	- 안드로이드의 핵심 커널 (Kernel): 리눅스(Linux)로 구성되어 있음 
	- 안드로이드 애플리케이션 개발 언어 : Java
	- 안드로이드 SDK에서 많은 라이브러리를 포함하고 있어 개발이 용이함
	- 오픈 소스를 지향함 
		: 운영체제부터 관련 문서 , 개발 도구 등 거의 모든 것을 무료로 사용 가능함
 	- 지속적이고 빠른 업그레이드를 제공함


	- Android 12.0(S) : 사용자의 UI 커스터마이즈 기능 강화, 머신러닝을 카메라 앱에 적용, 
		제한없는 4K 영상 촬영, privaxy Dashboard 추가, 상단 바에서 센서 해제, 
		위치 권한을 대략적 위치만 허용 가능, 와이파이 보안 강화 등을 지원



	안드로이드의 구조 
	안드로이드 아키텍쳐 확인. 

	OS 리눅스 커널  / 라이브러리 , 안드로이드 런타임 / 응용프로그램 프레임 워크 / 응용 프로그램
	


	안드로이드의 구조 

	1. 응용 프로그램(Applications)
	- 안드로이드 스마트폰에서 사용할 수 있는 일반적인 응용 프로그램
	- 웹 브라우저, 달력, 구글맵, 연락처, 게임 등 사용자 입장에서 가장 많이 사용함 
	- Java로 작성됨 
	
	2. 응용 프로그램 프레임워크(Application Freamwork) 
	- 안드로이드 API가 존재하는 곳
	- 안드로이드폰 하드웨어에 접근할 때 API를 통해서만 가능함

	3. 안드로이드 런타임 
	- Java 코어 라이브러리와 달빅 가상 머신 (Dalvik Virtual Machine) 또는 아트 런타임
	(ART Runtime) 으로 구성됨
	- 안드로이드는 Java 문법으로 프로그래밍하지만  Java 가상 머신을 사용하지 않고 
	이곳의 달빅 가상 머신이나 아트런타임을 사용함. 

	4. 라이브러리 (Libraries)
	- 안드로이드에서 사용되는 여러 시스템 라이브러리는 시스템 접근 때문에 Java가 
	아닌 C로 작성됨. 성능이 뛰어나며 세밀한 조작 가능함.

	5. 리눅스 커널 (Linux Kernel)
	- 하드웨어의 운영과 관련된 저수준의 관리 기능이 들어있음 
		: 메모리관리, 디바이스 드리아버, 보안 등 
	- 많은 스마트폰 장치를 지원함 
		: 카메라 , 터치스크린, GPS, 자이로스코프 등 


안드로이드 개발 환경

1. 안드로이드 개발을 위한 운영체제

	안드로이드 개발을 위한 운영체제
	- Windows, Linux, Mac
	- Windows 개발 환경이 가장 보편적
	- 안드로이드 개발 환경을 구축하면 가상의 안드로이드 장치인  AVD(Android Virtual Device) 제공
	- 실제 안드로이드 장비 없이도 안드로이드 장비가 있는 것처럼 작업 가능 
	- Android Studio 4.1 버전은  Windows 운영체제의 64bit만 설치할 수 있으며 
	  32bit Windows는 지원하지 않음

2. 안드로이드 개발 환경의 구축 


	안드로이드 개발 환경의 구성
	
	- 개발 환경 구성이 완료되면 Android Studio를 실행해서 코딩과 수정을 통해 앱을 개발
	- 코딩된 결과는  AVD에 출력하고, 개발자는 그결과를 확인


	안드로이드 개발 환경의 종류 
	: 안드로이드 개발 환경은 크게 세 가지로 나뉜다. 
	개발 환경 		사용언어 		수준 		개발 툴킷 		비고
	응용 프로그램 개발 	Java		초. 중급 		SDK 		일반응용 프로그램 개발 
						(Software Development Kit)
	시스템 응용 	C, C++		중. 고급		NDK		고수준의 응용 프로그램 개발
	프로그램 개발 				(Native Development Kit)

	하드웨어 제어 	C, C++		고급 		PDK		하드웨어 수준의 강력한 
	프로그램 개발  				(Platform Development Kit)	프로그램 개발


	Android Studio 의 역사
	Android Studio는 안드로이드 프로그래밍을 위한 통합개발환경(IDE)이며 구글에서 무료로 패포한다. 
	Android Studio 이전에는 주로 Eclipse가 사용되었으니 2014년 12월에  Android Studio 1.0이 출시되면서 
	점점 많은 개발자들이 Android Studio를 사용하기 시작하여 현재는 안드로이드 개발환경의 대부분을 
	차지하고 있다.  Android Studio는 버전별로  Canary - Beta - RC(Release Candidate, 출시 후보) - 
	Stable(정식) 의 차례로 출시되고 있다. 정식 버전 이후에 업데이트되면 뒤에 Patch라고 명명해서 배포된다. 
	2022년 1월 현재에는  Android Studio Arcitc Fox(2020.03.1) 정식 Patch, Android Studio Bunblebee(2021.1.1)RC,
	Android Studio Chipmunk(2021.2.1) Canary가 출시되어 있다. 


안드로이드 개발 환경 설치 

1. 안드로이드 개발 환경 설치 순서 
	안드로이드 개발 환경 구축

	에뮬레이터 가속기 설치 - android Studio  다운로드 / 설치 
	Android Studio 환경 설정 - 안드로이드  SDK 업데이트 
	- Android Virtual Device(AVD) 생성 - 안드로이드 앱 개발

2. 에뮬레이터 (AVD) 가속기 설치. 

3. Android Studio  설정

4. AVD 생성 




==============================================
Android Studio open
file - close project 
- android studio - More action - Device Manager 

설정 - 에뮬레이트된 기기정보 - check android version

over veiw  현재 사용중인 / 열려있는 프로그램들을 보는 화면 . 


안드로이드 라이브러리 프레임워크를 이해해야함. 

java 바이트코드파일을 jvm이 실행시키는데 이것이 
데스크탑에서는 java jvm 프로그램 동작, 
모바일에서는 달빅 가상머신으로 프로그램 동작한다. 

안드로이드 개발은 java를 통해서 이루어지고 
모바일에서 달빅 가상머신으로 실행된다는 대략적인 이해.  

안드로이드 라이브러리는 C로 

안드로이드의 베이스 환경은 리눅스. 
안드로이드의 핵심 커널 = 리눅스. 
안드로이드 프레임워크는 리눅스에서 돌아간다. 

안드로이드 공식 언어 Java , Kotlin ( + Kotlin 추가 됨. )

안드로이드 SDK 에는 라이브러리를 포함하고 있다 -  오픈소스.

안드로이드는 구글에서 여러개발업체들과 협업해서 생산함. 

핵심 : 안드로이드는 Java와 리눅스로 만들어진 프로그램 
	구글에서 ubuntu로 만듬. 


file - appearance & behavior - System settings - Android SDK - SDK tools -
 	'NDK' apply SDK component installer


settings - kepmap - eclipse - search 'run' - main menu - run : run / add keyboard shortcut : ctrl + f11 

AVD 문제 있을 때 강제 종료. 
작업관리자 qemu-system  **& 작업 끝내기 . kill the system



 




