03-16

python 

파이썬의 리스트 [ ]
- 리스트의 인덱스는 항상 0부터 시작. 
인덱스의 시작위체에서의 오프셋으로 생각할 것. 

파이썬의 다차원 리스트를 사용할 때 Numpy 를 이용한다.
(외부라이브러리인 numpy 설치 후 사용~)

Python has only primitive type. 
variable = value 
무조건 실수 연산이 된다. / float 실수계산 , // int 정수계산,  제곱구하기  ** 지수계산
python에서는 ' ' 사용하는게 일반적인 방법이다.

==============================================================

. append() : 원소를 추가하는 것 . 
python list create

if- else 
	if 
	elif
	else

nesting if - else 
	if 
		
	else
		if
		else

=======================

in 연산 

컬랙션에서 어떤 연산이 포함 되어 있는지 아닌 지 
어떤 묶음 안에 찾으려는 것이 있는지 확인해 볼때 사용. 

'A'  in 'ABCDEF'

In [1]: 'ABCDE'
Out[1]: 'ABCDE'

In [2]: 'A' in 'ABCDE'
Out[2]: True

In [3]: 10 in [1, 3, 5, 10]
Out[3]: True

In [4]: 6 in [1, 3, 5, 10]
Out[4]: False

'in' operator check the true or false.
 can use at if-else statements

=======================

논리 연산자에서 표기는 영문 그대로 사용 : and / or / not

In [31]: c = 'A'

In [32]: not('A'<= c and c <='z')
Out[32]: False

In [33]: 'A'<= c
Out[33]: True

In [34]: c <='z'
Out[34]: True

In [35]: not('A'<= c and c <='z')
Out[35]: False

In [36]: 'A'<= c and c <='z'
Out[36]: True

In [37]: not('A'<= c and c <='z')
Out[37]: False


범위 지정시 and 생략 가능 .
In [38]: not('A'<= c <='z')
Out[38]: False

=======================


2진수 10진수 확인
In [17]: bin(1<<10)
Out[17]: '0b10000000000'

In [18]: bin(1<<2)
Out[18]: '0b100'

In [19]: bin(1<<10)
Out[19]: '0b10000000000'

In [20]: 1<<10
Out[20]: 1024

In [21]: bin(1<<35)
Out[21]: '0b100000000000000000000000000000000000'

In [22]: 1<<35
Out[22]: 34359738368


비트 쉬프트 연산자 
<<  >> &

=======================

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Cell In[39], line 1
----> 1 'C'-c

TypeError: unsupported operand type(s) for -: 'str' and 'str'

>>>
In [40]: ord('C')-ord(c)
Out[40]: 2
---------------------------------------------------------------------------
In [46]: c
Out[46]: 'A'

In [47]: chr(ord(c) + 1)
Out[47]: 'B'

In [48]: c = chr(ord(c) + 1)

In [49]: c
Out[49]: 'B'

In [50]: c = chr(ord(c) + 1)

In [51]: c
Out[51]: 'C'

In [52]: c = chr(ord(c) + 1)

In [53]: c
Out[53]: 'D'
----------------------------------------------------------------------------

Q> 사과를 담는 바구니의 수를 구하기
사과의 수가 123일때 하나의 바구니에 10개의 사과를 담을 수 있다면 
	13개의 바구니가 필요한 코드


In [54]: numOfApples = 123

In [55]: sizeOfBucket = 10

In [56]: numOfApples/sizeOfBucket
Out[56]: 12.3

In [57]: numOfApples//sizeOfBucket
Out[57]: 12

In [58]: numOfApples//sizeOfBucket + 0 if numOfApples%sizeOfBucket==0 else 1		# wrong answer
Out[58]: 1

In [59]: numOfApples//sizeOfBucket + (0 if numOfApples%sizeOfBucket==0 else 1)
Out[59]: 13

----------------------------------------------------------------------------




 



