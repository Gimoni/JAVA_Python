04-20 java collection framework

hash 값의 특징. 
입력값이 같으면 항상 일정한 정수가 나온다 
입력이 다르더라도 hash 값은 같을 수 있다. 
hashset : 도서관 형태라고 생각하면 편함 
	데이터를 검색하고 찾아서 같은 데이터가 있으면 중복저장을 피하고 
	같은 데이터가 없으면 저장을 한다. (동등객체 비교확인- 중복저장을 피함.
	 // hash code를 알아내서 검색

map은 dictionary 라 표현되기도 함. 
map은 key를 가지고 객체를 저장또는 검색, 추가함. 
map은 두가지 타입을 저장해줌 

var - 타입 유추 


map collection 
: properties - 키하고 값이 다 string이다 

db properties java 표준적인 설정방법

map의 TreeSet은 정렬을 유지한 상태로 순서있게 처리 가능
treeset 중복을 불가하면서 정렬된 상태로 유지함.  

treeset 사용하려면 비교기compareTo 사용해야 한다. 

treemap 정렬조건 기준을 사용하여 지속적으로 정렬상태를 유지한다. 물론 속도는 늦음. 



============================================

Map 컬렉션 
- 동등 객체를 중복 저장하지않음
- 다른 객체라도 hashCode() 메소드의 리턴값이같고, 
equals() 메소드가true를 리턴하면 동일한 객체라고 판단하고중복 저장하지않음
- iterator() 메소드: 반복자를 얻어 Set 컬렉션의 객체를 하나씩 가져옴

Map 컬렉션
- 키와 값으로 구성된 엔트리 객체를 저장
- 키는 중복 저장할 수 없지만 값은 중복 저장할 수 있음. 기존에 저장된 키와 동일한 키로 값을
저장하면 새로운 값으로 대치

객체 추가 	V put(K key, V value) 	-주어진 키와 값을 추가, 저장이 되면 값을 리턴.

객체 검색 boolean containsKey(Object ket) 	- 주어진 키가 있는지 여부
	boolean containValue(Object value 	- 주어진 값이 있는지 여부
	Set<Map.Entry<K,V>>entrySet() 	- 키와 값의 쌍으로 구성된 모든 Map.Entry 객체를 Set에 담아서 리턴
	V get(Object key) 			- 주어진 키의 값을 리턴
	boolean isEmpty() 			- 컬렉션이 비어있는지 여부
	Set<K> keySet() 			- 모든 키를 Set 객쳉에 담아서 리턴
	int size()	 			- 저장된 키의 총 수를 리턴
	Collection<V> values() 		- 저장된 모든 값을 Collection에 담아서 리턴 
	
객체 삭제 void clear()			- 모든 Map.Entry(키와 값)을 삭제
	V remove(Object key) 		- 주어진 키와 일치하는 Map.Entry 삭제, 삭제가 되면 값을 리턴



HashMap
- 키로 사용할 객체가 hashCode() 메소드의 리턴값이 같고 equals() 메소드가 true를 리턴할 경우
동일 키로 보고 중복 저장을 허용하지 않음

Hashtable
- 동기화된 메소드로구성되어 있어 멀티 스레드가동시에 Hashtable의 메소드들을실행 불가
- 멀티 스레드 환경에서도 안전하게객체를 추가, 삭제할 수 있다. 

Properties
- 주로 확장자가 .properties인 프로퍼티 파일을 읽을 때 사용
- 프로퍼티 파일은 키와 값이 = 기호로 연결된 텍스트 파일(ISO 8859-1 문자셋, 한글은 \u+유니코드)
- Properties 객체를 생성하고, load() 메소드로 프로퍼티파일의 내용을 메모리로 로드



검색 기능을 강화시킨 컬렉션
TreeSet
- 이진 트리를 기반으로 한 Set 컬렉션
- 여러 개의 노드가 트리 형태로 연결된 구조. 루트 노드에서 시작해 각 노드에 최대 2개의 노드를
연결할 수 있음
- TreeSet에 객체를 저장하면 부모 노드의 객체와 비교해서 낮은 것은 왼쪽 자식 노드에, 높은 것은
오른쪽 자식 노드에 저장


Comparable과 Comparator
- TreeSet에 저장되는 객체와 TreeMap에 저장되는 키 객체를 정렬
-  Comparable 인터페이스에는compareTo() 메소드가정의. 
사용자 정의 클래스에서이 메소드를 재정의해서비교 결과를 정수 값으로 리턴
- 비교 기능이 없는 Comparable 비구현 객체를 저장하려면비교자 Comparator를 제공
- 비교자는 compare() 메소드를재정의해서 비교 결과를 정수 값으로 리턴

LIFO와 FIFO 컬렉션
후입선출과 선입선출
- 후입선출(LIFO): 나중에 넣은 객체가 먼저 빠져나가는 구조
- 선입선출(FIFO): 먼저 넣은 객체가 먼저 빠져나가는구조
- 컬렉션 프레임워크는LIFO 자료구조를제공하는 스택 클래스와 FIFO 자료구조를 제공하는큐
인터페이스를제공

Stack
- Stack 클래스: LIFO 자료구조를구현한 클래스

Queue
- Queue 인터페이스: FIFO 자료구조에서사용되는 메소드를정의
- LinkedList: Queue 인터페이스를구현한 대표적인 클래스


동기화된 컬렉션
- 동기화된 메소드로구성된 Vector와 Hashtable는멀티
스레드 환경에서 안전하게요소를 처리
- Collections의 synchronizedXXX() 메소드: ArrayList, 
HashSet, HashMap 등 비동기화된메소드를 동기화된
메소드로 래핑


수정할 수 없는 컬렉션
- 요소를 추가, 삭제할 수 없는 컬렉션. 컬렉션 생성 시 저장된 요소를 변경하고싶지 않을 때 유용
- List, Set, Map 인터페이스의정적 메소드인 of()로 생성
- List, Set, Map 인터페이스의정적 메소드인 copyOf()을 이용해 기존 컬렉션을 복사
- 배열로부터수정할 수 없는 List 컬렉션을 만듦















				