0419 java collection framework 


collection framework의 주요 인터페이스 
List/ Set/ Map 
List - 사용방법은 배열과 비슷, index를 가지고 있음.  
배열은 크기를 한번 정하면 수정이 불가 하지만 list는 가능 
list 는 인덱스를 순서 있게 저장한다. / 데이터 중복 저장 
map 하고 set은 순서 있게 저장 하지 않음 . 
set은 데이터의 중복을 허락하지 않음 . 중복 불가 
//set 데이터 중복을 삭제하고자 할 때 유용

List와 Map은 사용빈도가 높다 그만큼 활용도가 큰 편. 


List 구현객체 메소드 - ArrayList/ Vector/ LinkedList
CRUD - Create, Read, Update, Delete

set collection = index가 없어 순서유지가 되지않음 
	저장 또는 수정 되지 않는다 수정의 연산 불필요. 
	삭제하고 생성한다 중복저장 불가. 하나의 null만 저장 . 

set 자료구조 확인 중복을 제거하고 저장 . 
	







========================================
List collection - ArrayList, Vector, LinkedList

ArrayList 
- ArrayList에 객체를 추가하면 내부 배열에 객체가 저장되고 제한 없이 객체를 추가할 수 있음
- 객체의 번지를 저장. 동일한 객체를 중복 저장 시 동일한 번지가 저장. null 저장 가능
- ArrayList 컬렉션에 객체를 추가 시 인덱스 0번부터 차례대로저장
- 특정 인덱스의 객체를 제거하거나삽입하면 전체가 앞/뒤로 1씩 당겨지거나 밀림
- 빈번한 객체 삭제와 삽입이 일어나는 곳에선 바람직하지않음

Vector
- 동기화된 메소드로구성되어 있어 멀티 스레드가동시에 Vector() 메소드를 실행할 수 없음
- 멀티 스레드 환경에서는 안전하게객체를 추가 또는 삭제할 수 있음

LinkedList
- 인접 객체를 체인처럼 연결해서 관리. 객체 삭제와 삽입이 빈번한 곳에서 ArrayList보다 유리

-------------------
Set 컬렉션
-  Set 컬렉션은저장 순서가 유지되지않음
-  객체를 중복해서 저장할 수 없고, 하나의 null만 저장할 수 있음(수학의집합 개념)

HashSet
- 동등 객체를 중복 저장하지않음
- 다른 객체라도 hashCode() 메소드의 리턴값이같고, equals() 메소드가true를 리턴하면
동일한 객체라고 판단하고중복 저장하지않음