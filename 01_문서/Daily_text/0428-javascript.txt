0428-javascript

web - HTML CSS JavaScript - URL- HTTP 프로토콜 80port 사용..
request - response - JSP 서버


HTML - DOM // 기능 동작 수행 출력 //
DOM에 이벤트를 설정 - 함수 (function) 작성.  
객체 동작을 선택 event handler - callback 으로 작성된 코드 수행
/ 동작- 출력

웹브라우저는 - 객체를 문서화 해서 체계적인 자료구조에 저장해 놓음. 

DOM 이해. 
what is DOM? : Document Object model

tomcat server 최상위 경로 __> web app folder. 

HTML / -  정적 문서 

JSP - servlet -tomcal working  . ====> 동적 문서.

http:// 도메인 : port(개발모드는 808)/ 프로젝트명/ filename.jsp 리소스명(in webapp)
http://localhost:8080/chap24/dom.jsp

web - development tool - elements  개발자 도구에서 elements안에 
dom 전체를 확인할 수 있다. 

souce file 그대로 elements 안 dom 객체로 생성이 됨. 
elements안에서 얼마든지 동적 생성이 가능함. 

web browser icon = favicon  // 아이콘 설정

DOM 진입점  - Document 
DOM 자체를 지칭하는 것 - document

document.body.append(div)

모든 문서 객체에는 style이 있다. 

DOM의 구조 :  트리 구조 

DOM은 실제 메모리상에 javascript 객체화 하고 바로 직관적인 확인이 가능. 

트리 구조는 인덱스를 사용할 수 없는 자료구조 
/ 대신 트리구조는 부모, 자식,형제 관계로 연결되어 있는 자료구조이다.  
parent, child(children), sibling 

문서객체는 트리구조로 연결되어 있어 부모객체와 자식객체 , 형제객체를 
first / next / last / previous keyword를 사용해서 찾을 수 있다.

웹 - 개발 도구 - network - (checked Disable cache)


inline tag - width height 화면상에 랜더링이 적용이 안됨. // 값만 저장됨. 



jsp 작성시. 
style span { position: absolute;}


let spans = document.querySelectorAll("span")

spans[0].style.width

getComputedStyle(spans[0]).width 	// 기본 초기값을 구할 수 있음. / 
 


font width 구하고 좌표확인.
offset.. 






=====================
chap24 /// alpha.jsp 

let spans = document.qureySelectorAll('span')

spans

width = parseFloat(getComputedStyle(span[0]).width)

width

height = parseFloat(getComputedStyle(span[0]).height)

height 

for (let i=0; i<spans.length; i++) {
	spans[i].style.left = width*i + 'px'
}

for (let i=0; i<spans.length; i++) {
	spans[i].style.top = height*i + 'px'
}


chap24/ alpha2.jsp
data 속성으로 // 

spans[0].dataset

line, colum 정보를 가져올 수 있음. 




for (let s of spans) {
    let line = s.dataset.line;
    let column = s.dataset.column;

    s.style.top = height*(line-1) + 'px';
    s.style.left = width*(column-1) + 'px';
    
}



window.onload = function() {
	let spans = document.qureySelectAll('span');

 	let width = parseFloat(getComputedStyle(spans[0].width)
 	let height = parseFloat(getComputedStyle(spans[0].height)

	let main = document.qureySelector('main');
	main.style.height =  20*height + 'px';	// line 
	main.style.width = 40*width + 'px';	// column

	for (let s of spans) {
    let line = s.dataset.line;
    let column = s.dataset.column;

    s.style.top = height*(line-1) + 'px';
    s.style.left = width*(column-1) + 'px';
}

===================================



let spans = document.querySelectorAll('span')
undefined

spans[0].style.display = 'none';
'none'

spans[0].style.display = 'inline';
'inline'

let timerId = setInterval(() => {
    let s = spans[0]
    if (s.style.display=="inline")
        s.style.display="none"
    else
        s.style.display="inline"
}, 100);
undefined



==========================================

웹표준 
문서 객체 모델

내용.
- 문서 객체 모델의 기몬 용어와 개념 
- 문서 객체 선택
- 문서 객체 조작
- 이벤트 

문서 객체 모델 기본용어
- 문서 객체 
 : 태그를 가바스크립트에서 사용할 수 있는 객체로 만든 것 
- 문서 객체를 조작한다는 말은 결국 태그를 조작한다는 의미 
- 요소 노드 
	: <h1> 태그와  <script> 태그처럼 요소를 생성하는 노드 
- 텍스트 노드 : 화면에 출력되는 문자열
- 정적 생성 
	: 웹 페이지를 처음 실행할 때 HTML 태그로 적힌 문서 객체를 생성하는 것
- 동적 생성
	: 웹 페이지를 실행 중에 자바스크립트를 사용해 문서 객체를 생성하는 것
- 문서 객체 모델 Document Object Model, DOM
	: 웹 브라우저가 HTML 파일을 분석하고 출력하는 방식 





