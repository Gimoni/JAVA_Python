/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-04-21 05:40:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import util.Color;
import util.Alpha;
import java.util.Random;

public final class alphatest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("util.Color");
    _jspx_imports_classes.add("util.Alpha");
    _jspx_imports_classes.add("java.util.Random");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"Coche-Control\" content=\"no-store\"> \r\n");
      out.write("<title>alphatest.jsp</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	ul {\r\n");
      out.write("		margin: 3%;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<hr>\r\n");
      out.write("<form id=\"form\" action=\"alphatest.jsp\">\r\n");
      out.write("	<ul>\r\n");
      out.write("	<label for=\"line\">line : </label>\r\n");
      out.write("	<input id=\"line\" name=\"line\" type=\"number\" size=\"7\" min=\"1\" max=\"20\" placeholder=\"line\"><br>\r\n");
      out.write("	\r\n");
      out.write("	<label for=\"column\">column : </label>\r\n");
      out.write("	<input id=\"column\" name=\"column\" type=\"number\" size=\"7\" min=\"1\" max=\"40\" placeholder=\"column\"><br>\r\n");
      out.write("	\r\n");
      out.write("	fg : <select name=\"fg\" class=\"select\" placeholder=\"fg\"> \r\n");
      out.write("		<option value=\"black\">Black</option>\r\n");
      out.write("		<option value=\"red\">Red</option>\r\n");
      out.write("		<option value=\"grean\">Green</option>\r\n");
      out.write("		<option value=\"yellow\">Yellow</option>\r\n");
      out.write("		<option value=\"blue\">Blue</option>\r\n");
      out.write("		<option value=\"magenta\">Magenta</option>\r\n");
      out.write("		<option value=\"cyan\">Cyan</option>\r\n");
      out.write("		<option value=\"white\">White</option>\r\n");
      out.write("	</select><br>\r\n");

	String [] bg = {"black","red","grean", "yellow", "blue", "magenta", "cyan", "white"};

	
	/* for(String str : bg){
		if(str.equals(bg)){
			out.print("<option value='"+bg+"' selected>"+bg+"</option>");
		}
	} */
		/* document.write("<option>"+ "bg[i]"+ "</option>"); */

      out.write("\r\n");
      out.write("	bg : <select name=\"bg\" id=\"bg\" placeholder=\"bg\">\r\n");
      out.write("		<option>\"+ <");
      out.print("bg[i]");
      out.write("> + \"</option>\r\n");
      out.write("	</select><br>\r\n");
      out.write("	ch : <select name=\"ch\" class=\"select\" placeholder=\"ch\"> \r\n");
      out.write("		<option value=\"A\">A</option>\r\n");
      out.write("		<option value=\"B\">B</option>\r\n");
      out.write("		<option value=\"C\">C</option>\r\n");
      out.write("		<option value=\"D\">D</option>\r\n");
      out.write("		<option value=\"E\">E</option>\r\n");
      out.write("		<option value=\"F\">F</option>\r\n");
      out.write("		<option value=\"G\">G</option>\r\n");
      out.write("		<option value=\"H\">H</option>\r\n");
      out.write("		<option value=\"I\">I</option>\r\n");
      out.write("		<option value=\"J\">J</option>\r\n");
      out.write("		<option value=\"K\">K</option>\r\n");
      out.write("		<option value=\"L\">L</option>\r\n");
      out.write("		<option value=\"M\">M</option>\r\n");
      out.write("		<option value=\"N\">N</option>\r\n");
      out.write("		<option value=\"O\">O</option>\r\n");
      out.write("		<option value=\"P\">P</option>\r\n");
      out.write("		<option value=\"Q\">Q</option>\r\n");
      out.write("		<option value=\"R\">R</option>\r\n");
      out.write("		<option value=\"S\">S</option>\r\n");
      out.write("		<option value=\"T\">T</option>\r\n");
      out.write("		<option value=\"U\">U</option>\r\n");
      out.write("		<option value=\"V\">V</option>\r\n");
      out.write("		<option value=\"W\">W</option>\r\n");
      out.write("		<option value=\"X\">X</option>\r\n");
      out.write("		<option value=\"Y\">Y</option>\r\n");
      out.write("		<option value=\"Z\">Z</option>\r\n");
      out.write("	</select><br>\r\n");
      out.write("	<input type=\"submit\" value=\"submit\">\r\n");
      out.write("	</ul>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<hr>\r\n");


	String line = request.getParameter("line");
	String column = request.getParameter("column");
	String fg = request.getParameter("fg");
	String bg2 = request.getParameter("bg");
	String ch = request.getParameter("ch");



      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<span style=\"margin: 10%; background-color: ");
      out.print(bg);
      out.write("; color: ");
      out.print(fg);
      out.write(';');
      out.write('"');
      out.write('>');
      out.print(ch);
      out.write("</span>\r\n");
      out.write("<hr>\r\n");
      out.write("<h3><span>line:</span>");
      out.print(line);
      out.write("</h3>\r\n");
      out.write("<h3><span>column:</span>");
      out.print(column);
      out.write("</h3>\r\n");
      out.write("<h3><span>fg:</span>");
      out.print(fg);
      out.write("</h3>\r\n");
      out.write("<h3><span>bg2:</span>");
      out.print(bg2);
      out.write("</h3>\r\n");
      out.write("<h3><span>ch:</span>");
      out.print(ch);
      out.write("</h3>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
