package com.example.mapper;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.UncategorizedSQLException;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;

import com.example.model.Dept;
import com.example.model.Emp;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
public class EmpMapperTest {
	
	@Autowired
	DeptMapper deptMapper;
	
	@Autowired
	EmpMapper empMapper;
	
	@Autowired
	ObjectMapper objectMapper;
	

	@Test
	void countAll() {
		int cnt = empMapper.countAll();
		System.out.println("cnt = "+cnt);
		assertThat(cnt).isSameAs(14);
	}
	
	@Test
	void selectAll() throws IOException {
		var list = empMapper.selectAll();
		System.out.println(list);
		assertThat(list.size()).isSameAs(14);
		
		objectMapper.createGenerator(System.out)
					.useDefaultPrettyPrinter()
					.writeObject(list);
	}
	
	@Test
	void selectByEmpno() {
		var emp = empMapper.selectByEmpno(1001);
		System.out.println(emp);
		assertEquals(1001, emp.getEmpno());
		assertThat(emp.getEmpno()).isEqualTo(1001);
		
		emp = empMapper.selectByEmpno(9000);
		System.out.println(emp);
		assertNull(emp);
		assertThat(emp).isNull();
	}
	
	@Test
	@Transactional
//	@Rollback(false)
	void insertByEmpnoWithEname() {
		empMapper.insertByEmpnoWithEname(9000, "홍길동");
		System.out.println(empMapper.selectByEmpno(9000));
		
		int cnt = empMapper.insertByEmpnoWithEname(9000, "홍길동");
		System.out.println("cnt = "+ cnt);
		assertEquals(1, cnt);
		
		assertThrows(DataIntegrityViolationException.class, () ->{
			empMapper.insertByEmpnoWithEname(9001, null);
		});

		assertThatThrownBy(()-> {
			empMapper.insertByEmpnoWithEname(9001, null);
		}).isInstanceOf(DataIntegrityViolationException.class);
		
		assertThrows(DuplicateKeyException.class,()-> {
			empMapper.insertByEmpnoWithEname(1001, "홍길동");
		});
	}
	
	
//	@Test
//	@Transactional
//	void insertDapt() throws IOException {
//		var dept = new Dept(50, "개발1부", "경기");
//		deptMapper.insertDept(dept);
//		
//		objectMapper.createGenerator(System.out)
//		.useDefaultPrettyPrinter()
//		.writeObject(deptMapper.selectByDeptno(50));
//
//	}	
	

//	@Test
//	@Transactional
//	void insertDapt() throws IOException {
//		var dept = new Dept(50, "개발1부", "경기");
//		deptMapper.insertDept(dept);
//		
//		dept = new Dept(60, "개발2부", null);
//		deptMapper.insertDept(dept);
//		
//		objectMapper.createGenerator(System.out)
//					.useDefaultPrettyPrinter()
//					.writeObject(deptMapper.selectAll());
//		
//	}	
	
	
	@Test
	@Transactional
	void insertEmp() throws IOException {
		var emp = new Emp();
		emp.setEmpno(9000);
		emp.setEname("홍길동");
		int cnt = empMapper.insertEmp(emp);
		assertThat(cnt).isEqualTo(1);
		
		emp = empMapper.selectByEmpno(9000);
		System.out.println(emp);
		
//		dept = new Dept(60, "개발2부", null);
//		cnt = deptMapper.insertDept(dept);
//		assertThat(cnt).isEqualTo(1);
//		
//		assertThrows(DuplicateKeyException.class, () -> {
//			deptMapper.insertDept(new Dept(60, "개발3부", null));
//		}); // DuplicateKeyException error를 확신하는 테스트 60번은 이미 존재함. 
//		
//		assertThrows(DataIntegrityViolationException.class, ()-> {
//			deptMapper.insertDept(new Dept(60, null, null));
//		}); // DataIntegrityViolationException error를 확신하는 테스트 dename에는 null이 올 수 없다
//		
//		assertThrows(DataIntegrityViolationException.class, ()->{
//			deptMapper.insertDept(new Dept(100, "개발4부", null));
//		});	// DataIntegrityViolationException을 error를 확신하는 테스트 dename에는 null이 올 수 없다
//		
//		objectMapper.createGenerator(System.out)
//		.useDefaultPrettyPrinter()
//		.writeObject(deptMapper.selectAll());
	}	
	
	@Test
	@Transactional
	void update() throws IOException {
		int cnt = deptMapper.update(10, "xxx", "yyy");
		assertThat(cnt).isEqualTo(1);
		
		cnt = deptMapper.update(50, "xxx", "yyy");
		assertThat(cnt).isEqualTo(0);
		
		assertThrows(DataIntegrityViolationException.class, () ->{
			try {
				deptMapper.update(20, null, "서울");
			} catch (UncategorizedSQLException e) {
				throw new DataIntegrityViolationException(e.getMessage());
			}
		});
		
		
		cnt = deptMapper.update(100, "개발4부", "부산");
		assertThat(cnt).isEqualTo(0);
		
		cnt = deptMapper.update(30, "개발4부", null);
		assertThat(cnt).isEqualTo(1);
		
		objectMapper.createGenerator(System.out)
					.useDefaultPrettyPrinter()
					.writeObject(deptMapper.selectAll());
	}
	
	@Test
	@Transactional
	void updateDept() throws IOException {
		var dept = new Dept(50, "개발1부", "경기");
		int cnt = deptMapper.updateDept(dept);
		assertThat(cnt).isEqualTo(1);
		
		dept = new Dept(60, "개발2부", null);
		cnt = deptMapper.updateDept(dept);
		assertThat(cnt).isEqualTo(1);
		
		assertThrows(DuplicateKeyException.class, () -> {
			deptMapper.updateDept(new Dept(60, "개발3부", null));
		}); // DuplicateKeyException error를 확신하는 테스트 60번은 이미 존재함. 
		
		assertThrows(DataIntegrityViolationException.class, ()-> {
			deptMapper.updateDept(new Dept(60, null, null));
		}); // DataIntegrityViolationException error를 확신하는 테스트 dename에는 null이 올 수 없다
		
		assertThrows(DataIntegrityViolationException.class, ()->{
			deptMapper.updateDept(new Dept(100, "개발4부", null));
		});	// DataIntegrityViolationException을 error를 확신하는 테스트 dename에는 null이 올 수 없다
		
		objectMapper.createGenerator(System.out)
		.useDefaultPrettyPrinter()
		.writeObject(deptMapper.selectAll());
	}
	
	@Test
	@Transactional
	void delete() throws IOException {
		int cnt = deptMapper.delete(90);
		assertThat(cnt).isEqualTo(0);
		
		cnt = deptMapper.delete(40);
		assertThat(cnt).isEqualTo(1);
		
		assertThrows(DataIntegrityViolationException.class, ()-> {
			deptMapper.delete(10);
		});
		
		objectMapper.createGenerator(System.out)
		.useDefaultPrettyPrinter()
		.writeObject(deptMapper.selectAll());		
		
	}

}
