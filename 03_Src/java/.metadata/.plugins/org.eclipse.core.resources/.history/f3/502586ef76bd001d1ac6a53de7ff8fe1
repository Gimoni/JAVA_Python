
public class StringExample {

	
	public static void main(String[] args) {
		
		String date1 = "2022/12/03 12:11:20";
		
		String[] values = date1.split(" |/");
		
		for (int i=0; i<values.length; i++)
			System.out.println(values[i]);
			
	}
	
	public static void main4(String[] args) {
		
		String str = "java python sql";
		System.out.println(str.indexOf("python"));; 		// 5   : index 저장된 문자열 위치를 나타내는 번호
		
		String[] splits = str.split(" ");
		
		for (int i = 0; i<splits.length; i++)
			System.out.println(splits[i]);
		
		String str1 = "java,   python,   sql";
		System.out.println(str.indexOf("sql"));; 		// 12   : index 저장된 문자열 위치를 나타내는 번호
		
		String[] splits1 = str1.split(",");					// ","를 기준으로 분리해서 출력 리턴
		
		for (int i = 0; i<splits1.length; i++)
			System.out.println("[" +splits1[i].strip() + "]");		// .strip() : 양 사이드의 스페이스를 제거하고 리턴
																	// 
	}
	
	public static void main3(String[] args) {
		int num = 100;
		
		System.out.println(num +100); 		// num의 값은 변함이 없다. 
		
		/*
		 * 문자열 연산. 
		 */
		
		String str = "Hello";
		
		System.out.println(str.length());	// 문자열의 길이를 구하는 메소드 .length()를 사용.
		System.out.println(str.toUpperCase());	// 문자열을 대문자로 구해서 리턴해준다. .toUpperCase()
		System.out.println(str);
		System.out.println(str.toLowerCase());  // 문자열을 소문자로 구해서 리턴해준다. .toLowerCase()
		System.out.println(str.replace('l', 'x'));	// 문자열의 하나의 문자를 다른 것으로 대체해서 리턴해준다. .replace() 
		System.out.println(str.replaceAll("l", "xy"));	// 문자열을 다른 문자로 대체해서 리턴해준다. .replaceAll()
		
		System.out.println(str.concat(" World"));	// 또 다른 문자를 이어 붙여서 결과를 리턴. .concat()
		System.out.println(str + " World");
	}
	
	public static void main2(String[] args) {
		
		int num = 100; 		// stack에 메모리 생성
		
		String str = new String("Hello");		// new (참조타입연산자) : heap에 메모리가 생성, 할당 됨. 
//		String str1 = "Hello";					// new String을 생략해도 컴파일이 가능 String에 해당.
//		String str2 = "Hello";					// 값이 같은면 똑같은 참조에 저장한다. 
//		String str3 = "Hello";
		String str1 = new String("Hello");
		String str2 = str1;
		String str3 = str1;
		
		
		System.out.println(str == str1);		// false 참조비교 
		System.out.println(str == str2);		// false 참조비교 
//		System.out.println(str.equals(str1)); 	// true 값 비교. 값: "Hello"
		
		System.out.println(str1 == str2); 		// true ///? why?
												// new String을 생략했을 때 값이 같으면 컴파일러는 같은 참조에 저장한다. 
		
		
	}

}
